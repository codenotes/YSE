apply plugin: 'com.android.model.application'


def yse_path = "D:/GitHub/yse-soundengine/yse_binary_release_android"

//task copyYSELibs(type: Copy) {
//    from("D:\\GitHub\\yse-soundengine\\yse_binary_release_android\\lib\\dll")
//    into "src\\main\\jniLibs"
//    include '**\\*.so'
//}

//tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyYSELibs }

//clean.dependsOn 'cleanCopyYSELibs'

//tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
//    pkgTask.jniDir new File(buildDir, 'native-libs')
//}

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.0"

        defaultConfig.with {
            applicationId    = "com.android.yseDemo"
            minSdkVersion.apiLevel    = 5
            targetSdkVersion.apiLevel = 23
        }
    }


//
//    repositories {
//        libs(PrebuiltLibraries) {
//            yse {
//                headers.srcDir "${yse_path}/include"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("${yse_path}/lib/dll/${targetPlatform.getName()}/libyse_dll.so")
//                }
//            }
//        }
//    }

    compileOptions.with {
        sourceCompatibility=JavaVersion.VERSION_1_7
        targetCompatibility=JavaVersion.VERSION_1_7
    }

    android.ndk {
        moduleName = "yseDemo"
        cppFlags.add("-std=c++11")
        cppFlags.add("-I${file("${yse_path}/include")}".toString())
        ldFlags.add("-L${file(projectDir).absolutePath + "/src/main/jniLibs/\$(TARGET_ARCH_ABI)/libyse_dll.so"}".toString())
        ldLibs.addAll(["log", "GLESv2"])
        stl    = "c++_static"
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }

    android.productFlavors {
        create ("arm7") {
            ndk.abiFilters.add("armeabi-v7a")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/armeabi-v7a')}".toString())
        }
        create ("arm8") {
            ndk.abiFilters.add("arm64-v8a")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/arm64-v8a')}".toString())
        }
        create ("x86-32") {
            ndk.abiFilters.add("x86")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/x86')}".toString())
        }
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa

        // build one including all cpu architectures
        create("all")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile project(':openCVLibrary300')
}